************************
Date: 31-JAN-2024
************************
************************
Core Java COURSE CONTENTS:
************************
Introduction to Java
Data Types & Keywords in Java
Java Variables
Operators in Java
Methods in Java
Java Objects & Classes
OOPS
Access Modifiers
static & final keywords
Exception Handling
Arrays
String, StringBuffer & StringBuilder
Enhanced for-loop
Object Class
Packages
Garbage Collection
Collection Framework
Serialization
Multithreading
Java 8 features
************************














************************
Introduction to Java
************************
What is Java?
	-> Java is a programming language.
	-> Java is a high-level, class-based, object-oriented programming language. High-Level language is a language in normal English. i.e., Human understandable form.
	-> Programming Language :
		-> A programming language is a formal language that is used to give instructions to a computer.
		It is a set of rules and syntax that allows programmers to write code and create software applications, websites, algorithms and more.
		-> Programming languages are used to communicate with computers and tell them what tasks to perform and how to perform them.
		-> There are numerous programming languages available, each with its own syntax, rules and purpose.
		Some popular programming languages:
		-> Java, C, C++, Javascript, Python, Ruby, C#, Swift.
		
	-> James Gosling is a person who introduced Java, so called him father of Java.
	-> The company that started Java is Sun Microsystems Inc. (US), but currently Java is Owned by Oracle Corporation.



History behind Java:

	-> The history of Java is very interesting. In 1991 ,Sun micro systems Inc.(US) started a project to develop software for consumer electronic devices, televisions etc that could be controlled by a remote . This project was called the Green project.

	->  Ultimately, it was James Gosling, one of the members of the Green Project. Gosling thought C or C++ could be used to develop the project.But the problem he faced with them is that they were system dependent languages. Hence could not be used on various processors, which the electronics devices use. So they started developing a new language which is completely system dependent.

	-> The language was initially called Oak after an oak tree that stood outside Gosling's office. Later the project was renamed as Java.

	-> Why the name Java ? James Gosling and his team  members were consuming a lot of coffee while developing this language.Good quality of coffee was exported to all over the world from a place called Java Island. Hence they fixed the name of the place for the language java. And the symbol for the java language is coffee cup and saucer.

	-> Sun Microsystems released the first public implementation as Java 1.0 in 1996.
	
	-> Later Java was divided into J2SE,J2EE & J2ME.

	J2SE: Java Platform, Standard Edition. Which is used to develop desktop applications.
	J2EE: Java platform, Enterprise Edition. Which is used to develop Enterprise applications.
	J2ME: Java platform, Micro Edition. Which is used to develop embedded & mobile applications.

	-> J2SE 1.2 is released in December 1998 and latest release is Java SE 21 in September 19, 2023

	-> Oracle Corporation's acquisition of Sun Microsystems in 2009â€“10.

Refer PPT


Companies that Use Java:
	->	Java is used by companies in tech, government, finance, healthcare, insurance, education, manufacturing, defense and more. 90 percent of Fortune 500 companies use Java for their backend architecture. Yet because of its speed and scalability, many startups facing rapid growth use Java to power their tools too. 
	

Java developers make great money:
	->	The median entry-level salary for Java developers is $60,000 USD. With a few years of experience, Java developers can expect to meet and exceed $100,000 USD per year. While salaries vary by company and location, Java salaries are consistently competitive with other common language developer salaries.
	
Java has a strong and active community:
	->	Oracle estimates that there are more than 10 million Java developers worldwide. Any developer can tell you the immense role the programming community plays in their ongoing education. When you are stuck, you turn to Stack Overflow, a programming question and answer platform. 

Java is beginner-friendly:
	->	Java evolved from the languages C and C++, which are also still widely used today. While Java shares some functionalities with C and C++, it has evolved into a much more beginner-friendly language.
	
Features of Java:

	1.Simple and Familiar 
	2.Object-Oriented 
	3.Portable & Platform Independent
	4.Secured 
	5.Robust 
	6.Architecture Neutral
	7.Compiled & Interpreted
	8.High Performance
	9.Multithreaded
	10.Distributed
	11.Dynamic and Extensible
	
1. Simple and Familiar :
	-> Java is very easy to learn, and its syntax is simple, clean and easy to understand. 
	-> Java is familiar since it's based on existing languages like C++ and incorporates many features from it.
	
2. Object-Oriented:
	-> Java strongly supports Object-Oriented Programming concepts such as abstraction ,encapsulation, inheritance and  polymorphism. So Java is an object-oriented programming language. Everything in Java is an object.
	
	-> All the instructions and data in a Java program have to be added inside a class.

3.Portable & Platform Independent:	
	-> 	Java is portable because it facilitates you to carry the Java bytecode to any platform. It doesn't require any implementation.
	->	Java is platform independent because the Java program can be compile in one machine & which can be executed on any other machine, regardless of the OS, as lang as there is a JVM installed.
	
4. Secured:
	With Java, we can develop virus-free systems. Java is secured because:
		-> No explicit pointer
		-> Java Programs run inside a virtual machine sandbox
		-> Class loader 
		-> Bytecode Verifier
		-> Security Manager
		
5. Robust:
	-> It uses strong memory management.
	-> Java provides automatic garbage collection which runs on the Java Virtual Machine to get rid of objects which are not being used by a Java application anymore.
	->	There are exception handling and the type checking mechanism in Java. 
	-> Java is a strongly-typed language, which is a feature that can help lower the number of bugs in an application, and provides error handling mechanisms.
	All these points make Java robust.
	
6. Architecture Neutral:
	Java is architecture neutral because there are no implementation dependent features, for example, the size of primitive types is fixed.
	
7. Compiled and Interpreted:
	->	Java combines the power of compiled languages with the flexibility of interpreted languages.
	->	The compiler (javac) compiles the source code into bytecode, then the Virtual Machine (JVM) executes this bytecode by transforming it into machine-readable code..

8. High Performance:
	-> Bytecodes that the compiler generates are highly optimized, so the Virtual Machine can execute them much faster. This is why Java is faster than other traditional interpreted programming languages.
	
9. Multithreaded:
	->	Also known as Thread-based Multitasking, multithreading is a feature that allows executing multiple threads simultaneously.


10. Distributed:
	->	Java is distributed because it facilitates users to create distributed applications in Java. Remote Method Invocation (RMI) and Enterprise Java Beans (EJB) are used for creating distributed applications.
	
11.Dynamic and Extensible:
	->	Java is a dynamic language. It supports the dynamic loading of classes. It means classes are loaded on demand. It also supports functions from its native languages, i.e., C and C++.

************************
Date: 01-FEB-2024
************************

Java versions and its release dates:

	Version				Date:

	JDK Beta			1995
	JDK 1.0				January 23, 1996
	JDK 1.1				February 19, 1997
	J2SE 1.2			December 8, 1998
	J2SE 1.3			May 8, 2000
	J2SE 1.4			February 6, 2002
	J2SE 5.0			September 30, 2004
	Java SE 6			December 11, 2006
	Java SE 7			July 28, 2011
	Java SE 8(LTS)		March 18, 2014
	Java SE 9			September 21, 2017
	Java SE 10			March 20, 2018
	Java SE 11(LTS)		September 25, 2018
	Java SE 12			March 19, 2019
	Java SE 13			September 17, 2019
	Java SE 14			March 17, 2020
	Java SE 15			September 15, 2020
	Java SE 16			March 16, 2021
	Java SE 17(LTS)		September 14, 2021
	Java SE 18			March 22, 2022
	Java SE 19			September 20, 2022
	Java SE 20			March 21, 2023
	Java SE 21(LTS)		September 19, 2023

*LTS(Long Term Support): A Java LTS version is that will remain the industry standard for several years.

Installation of Java:

Download Java Link: https://www.oracle.com/java/technologies/downloads/#jdk21-windows



Java Hello World Program:

	The process of Java programming can be simplified in three steps:
	
		Step 1: Create a Java program.
		Step 2:	Compile the Java program. 
		Step 3:	Execute the Java program.
		

Step 1: Create a program:
		Syntax:
				public class ClassName{
					public static void main(String[] args){
						//Statements
					}
				}
				
				
		Example:
				public class HelloWorld{
					public static void main(String[] args){
						System.out.println("Hello World");
					}
				}
				
		--> Save this program with file name "HelloWorld.java"
				
Step 2:	Compile the Java program:
		Syntax:
				javac filename
		Example:
				javac HeloWorld.java
				
Step 3:	Execute the Java program.		
		Syntax:	
				java classname
		
		Example:	
				java HelloWorld
		
		--> Java programs start executing from the main method.
		--> It prints the Hello World in command-prompt.

************************
Date: 02-FEB-2024
************************
JDK, JRE, and JVM:

JDK(Java Development Kit):
	-> The JDK is a software development kit that develops applications in Java. Along with JRE, the JDK also consists of various development tools (Java Debugger, JavaDoc, compilers, etc.)
	->	It primarily functions in development & assists in executing codes. 
	->	The JDK is platform-dependent. It means that for every different platform, you require a different JDK.
	->	Since JDK is primarily responsible for the development, it consists of various tools for debugging, monitoring, and developing java applications.
	->	JDK = Development Tools + JRE (Java Runtime Environment)
	->	It basically provides an environment for developing and executing the Java source code.
	->	Any user can easily install JDK on Unix, Mac, and Windows OS (Operating Systems).
		Download Java Link: https://www.oracle.com/java/technologies/downloads/#jdk21-windows
	
JRE (Java Runtime Environment):
	-> 	JRE = JVM + Libraries( ex: rt.jar,etc) for running the application + Some Supporting Â files.
	-> Â (JRE) is an implementation of JVM. It is a type of software package that provides class libraries of Java, JVM & various other components for running the applications written in Java programming. JRE is only used by those who only want to run Java programs that are clients of software applications.
	-> Â JRE has a major responsibility for creating an environment for the execution of code.
	->	JRE, just like JDK, is also platform-dependent. It means that for every different platform, you require a different JRE.
	->	JRE, on the other hand, does not consist of any tool- like a debugger, compiler, etc. It rather contains various supporting files for JVM, and the class libraries that help JVM in running the program.
	
JVM (Java Virtual Machine):
	-> It provides a runtime environment for driving Java applications or code. JVM is an abstract machine that converts the Java bytecode into a machine language. It is also capable of running the programs written by programmers in other languages (compiled to the Java bytecode). The JVM is also known as a virtual machine as it does not exist physically.
	-> JVM is essentially a part of the JRE (Java Run Environment). You cannot separately download and install it. 
	-> JVM primarily performs the following tasks:
		->	Provides runtime environment
		->	Verifies code
		->	Loads code
		->	Executes code
		
	-> JVM is the one that actually calls the main method present in a java code. 

	-> Java applications are called WORA (Write Once Run Anywhere). This means a programmer can develop Java code on one system and can expect it to run on any other Java-enabled system without any adjustments. This is all possible because of JVM.
	
	-> Java is a purely interpreted language. However, before execution, Java source code needs to be compiled into bytecode. Bytecode is a special machine language native to the JVM. The JVM interprets and executes this code at runtime.
	
	-> Whenever the Java application starts, a JVM instance is to be created.
	
	Class Loader:
		->	The JVM makes use of the ClassLoader subsystems to bring the compiled class files into JVM memory.Besides loading, the ClassLoader also performs linking and initialization.
			-> Verifying the bytecode for any security breaches
			-> Allocating memory for static variables
			-> Replacing symbolic memory references with the original references
			-> Assigning original values to static variables
			-> Executing all static code blocks
			
	JVM Memory:
		Method Area: This is Â where JVM keeps all of your class information. Static variables, static blocks, static methods, and instance methods are all stored in this section.
		
		Heap Area:	When the JVM boots up, it creates a heap. During the applicationâ€™s runtime, it may grow or shrink in size. All the objects will be stored in the heap.

		Stack Area:	The stack is a specific part of a computer's memory that is used to store information about local variables and function calls.
		
		PC(Program Counter) Register: Each JVM thread has its PC register. Each thread executes the code of a single method at any given time. The behavior of the PC depends on the nature of the method: For a non-native method, the PC register stores the address of the current instruction being executed.
		
		Native Stack: All native methods used in your program are included in this category.
		
			
	Execution Engine :
		->	The execution engine subsystem is in charge of reading the bytecode, converting it into machine native code, and executing it. It uses an interpreter to execute bytecode.
		
		Interpreter : This converts the high-level program statement into Assembly-level language. It converts the code into machine code when the program is run.
		
		JIT Compiler:Â The JIT (Just In Time) compiler improves performance by compiling bytecode to native code for repeated method calls
		
		Garbage Collector:Â The Garbage collector collects and removes all unreferenced objects.
		
		Native Interface:Â The Java Native Interface acts as a bridge between Java method calls and native library calls.
		
		Native Libraries:Â Java Native Libraries are libraries that include code or programs written in languages other than Java, such as C, C++, and others. With the help of Java Native Interface(JNI), they can be integrated into the Java application as needed.

************************
Date: 05-FEB-2024
************************
*********************		
Data Types 		
*********************		

What is Data type?

	->	A Data type is used to define the type of value that variable can hold. 
	
	->	Java is a statically-typed languagelanguage, which means that the data type of a variable is declared before the variable is used.
	
	->	Java is also a strongly typed, which means once a variable is declared to be of a certain data type, it cannot hold values of other data types.
	
	Syntax:
			datatype variablename;

There are two categories of data types in Java:
																
	1. Primitive data types :
	2. Non-primitive data types:
	
1. Primitive data types: Java supports 8 primitive data types under four categories.
	
		i)	Integers	
					1.byte	-> 	8 bits 		( 1 byte)		-128 to 127
					2.short	->	16 bits		( 2 bytes)		-32,768 to 32,767
					3.int	->	32 bits		( 4 bytes)		-2,147,483,648 to 2,147,483,647
					4.long	->	64 bits		( 8 bytes)		-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807
					
			Example:
					byte marks=90;
					short year=2024;
					int salary=200000;
					long networth=9147483647L;
					
		ii)	Decimalals
					5.float	->	32 bits		( 4 bytes)		upto 7 decimal digits
					6.double->	64 bits		( 8 bytes)		upto 16 decimal digits
					
			Example:
					float percentage=95.50f;
					double exchangerate=1.9876556789;
		iii)Character
					7.char	->	16 bits		( 2 bytes)		
						
					In Java, the char data type is used to represent a single 16-bit Unicode character. It can store any character from the Unicode character set, including letters, digits, punctuation, symbols, and control characters.
					
					It's important to note that when assigning a character literal, should use single quotes ('). 
					
			For example, char ch = 'P';

					
		iV)	Boolean
					8.boolean->	1 bit (true or false)
					
			Example:
					boolean flag=true;
					or
					boolean flag=false;
					
	2. Non-primitive data types: The non-primitive data types include Classes, Interfaces, and Arrays.

************************
Date: 06-FEB-2024
************************
2. Non-primitive data types: 
		Non-primitive data types, also known as reference types or complex data types, are data types that are not directly supported by the programming language itself, but are created by the programmer using combinations of primitive data types. These data types are typically more complex and can represent Class, Object, String,Arrays,Collections .. etc.
		
		-> Class : 
				-> In general a class is a user-defined data type.
				-> A class is a blueprint or a prototype that defines the structure and behavior of objects.
				-> A class encapsulates data (attributes) and behavior (methods).
				
		-> Object: 
					-> An object is an instance of a class created at runtime.
					-> Each object has its own state (attribute values), and its behavior is defined by the methods of the class.				
		-> String :
				-> String is a class in java.
				-> Strings are defined as an array of characters. String is a sequence of characters.

			String firstName = â€œRajesh";
			or
			String company = new String("Wipro");
			or
			String name = firstName + " Kumar";
		
		-> Memory allocation for Non-primitive data types happens on the Heap Memory within the Java Virtual Machine (JVM) .
		
		
Java Variables:
		-> A variable is a name of the memory location that holds data, and its value can be changed during the execution of a program.
		-> A variable is assigned with a data type, which indicates the type of data it holds. 
		
		Syntax:
			datatype variablename;
			
		Examples:
			byte marks;											// Variable declaration
			short mathsMarks, scienceMarks, socialStudiesMarks;	// Declares multiple variables
			char grade = 'B';        							// Declare & assign a value for single variable.
			int mathsMarks = 95, scienceMarks = 80;  			// Declare & assign a value for multiple variable.

			
		-> Naming conventions:
				=> There are conventions for naming variables to enhance code readability and maintainability.
				=> Adhering to these conventions helps make your code more understandable to others and promotes consistency across projects.
				
				=> Variable Names: Variables should be named in camel case, starting with a lowercase letter and using mixed case for subsequent words.
					Example: firstName,lastName,salary.
					
				=> Class Names: Class names should follow the camel case convention and start with an uppercase letter.
					Example: EmployeeDetails,StudentInfo,...etc.
					
				=> Constants : Constants, variables whose values should not change, are typically written in uppercase letters with underscores separating words.
					Example: COMPANY_NAME,MIN_VALUE,MAX_VALUE	
					
				=> Packages : Package names should be in lowercase letters and follow a reverse domain name convention.
					Example: com.grats.projectname
					
				=> Booleans: Use names that convey a sense of true/false values for boolean variables.
					Example: isAvailable, hasPermission, isEnabled.
					
			->Avoid using Java reserved words as variable names (e.g., int, class, public).
					
		-> Java has mainly below type of variables
		
				1. Local Variables
				2. Instance Variables
				3. Static Variables
		
		1. Local Variables: Local variables in Java are variables declared within a method, constructor, or block of code. These variables have a limited scope, meaning they are only accessible within the block of code where they are declared. Once the block of code is exited, the local variable goes out of scope, and its memory is eligible for garbage collection.
		
			Example:
					public void method(){
						int no=123;
						String name="Grats";
					}
					
					public Student(){
						int studentId=1001;
						String studentName="abc";
						float percentage="9.9";
						boolean isOptedExtraCourse=true;
						char grade='B';
					}
					
					if(condition){
						int no=123;
						String name="Grats";
					}
					
				-> Local variables memory is allocated on the Stack Area within the Java Virtual Machine (JVM)
				
				-> Memory allocation for primitive data type variables in Java happens on the stack.
				-> The stack is a region of memory that operates in a last-in, first-out (LIFO) fashion, and it is used for storing local variables and method call information.
				-> When a method is called, a stack frame is created for that method, and local variables, including primitive data types, are allocated within this frame.
				-> The memory for primitive variables on the stack is automatically reclaimed when the method exits, making it a fast and efficient way to manage memory.
	
				Example:
					public class PrimitiveMemoryAllocation {
						public static void main(String[] args) {
							int num1 = 14;  // 'int' variable 'num1' is allocated on the stack
							double num2 = 20.5;  // 'double' variable 'num2' is also allocated on the stack
						}
					}
					-> the variables num1 and num2 are local variables, and their memory is allocated on the stack. When the main method exits, the memory for these variables is automatically reclaimed.
					-> It's important to note that the stack is generally faster for memory access compared to the heap.
					
		
		2. Instance Variables: Variables that are declared inside a class without the â€˜staticâ€™ keyword are referred to as instance variables. Instance variables can be accessed with an object. Instance variables are replicated for every object of the class being created.
			
			Example: 
				public class Student{
					int studentId;
					String studentName;
					float percentage;
					boolean isOptedExtraCourse;
					char grade;
				}
			
				-> Instance variables memory is allocated on the Heap Area within the Java Virtual Machine (JVM).
				-> instance variables (also known as fields or members) are automatically assigned default values if they are not explicitly initialized. The default values depend on the data type of the instance variable. 
				
				Here are the default values for various data types:
				
				Primitive Types:
					byte, short, int, long: 0
					float, double: 0.0
					char: '\u0000'
					boolean: false
				
				Default value is null for any Object type.
				
				Example:
					public class DefaultValues {
						byte byteVar;      // 0
						short shortVar;    // 0
						int intVar;        // 0
						long longVar;      // 0
						float floatVar;    // 0.0
						double doubleVar;  // 0.0
						char charVar;      // '\u0000'
						boolean boolVar;   // false
						String name;		// null
					}
					
		3. Static variableÂ - Variables that are declared inside a class with the â€˜staticâ€™ keyword are referred as static variables. 
			Example: 
				public class Employee{
					static String companyname = "Wipro";
				}
			-> Instance variables memory is allocated on the Method Area within the Java Virtual Machine (JVM)


Keywords or reserved words in Java:
		
		keywords are reserved words that have a specific meaning and cannot be used as identifiers (names for variables, classes, methods, etc.). These keywords are an essential part of the language's syntax and define the structure and behavior of Java programs. Here's a list of Java keywords:

		->Access Modifiers:
				public
				protected
				private
				
		-> Class, Method, and Variable Declaration:
				class
				interface
				extends
				implements
				void
				return
				this
				super
				new
				static
				final
				abstract
				
		-> Conditional Statements:
				if
				else
				switch
				case
				default
				
		-> Looping Statements:
				for
				while
				do
				break
				continue
				
		-> Exception Handling:
				try
				catch
				finally
				throw
				throws
				
		-> Package and Import:
				package
				import
			
		-> Data Types:
				boolean
				byte
				short
				int
				long
				float
				double
				char
			
		-> Modifiers:
				abstract
				final
				static
				volatile
				synchronized
				transient
			
		-> Other Keywords:
				instanceof
				native
				strictfp
			
		-> Reserved Literals:
				true
				false
				null

************************
Date: 07-FEB-2024
************************

	=>	Java allows the use of certain special characters like underscores (_) and dollar signs ($), it's generally recommended to use letters, numbers, and underscores for better readability.
	=>	The first character must be a letter, underscore, or dollar sign.
	=>	Variable names cannot contain spaces.



1. What is a variable in Java?
	
2. Can use a variable before it is declared in Java?
	
3. What is the difference between primitive data types and objects in terms of variables?
	
4. Differentiate between local variables, instance variables, and class variables?
		
5. What is the default value of a variable if it is not explicitly initialized in Java?

6. Explain the concept of variable shadowing in Java?
	

Operators in Java:
	=> Operators are symbols that perform operations on variables and values. There are several types of operators in Java, and they can be categorized into different groups based on their functionality.

	=> If an operator acts on a single variable, it is called a unary operator.
	=> If it acts on two variables, it is called a binary operator.
	=> If it acts on three variables then it is called a ternary operator.

Here are some common types of operators in Java:

	1. Arithmetic Operators
	2. Relational Operators
	3. Logical Operators
	4. Assignment Operators
	5. Increment and Decrement Operators (Unary Operators)
	6. Ternary Operator
	7. Bitwise Operators
	8. Shift Operators


	1. Arithmetic Operators: Arithmetic Operators used to perform mathematical calculations.
		=> + (addition)
		=> - (subtraction)
		=> * (multiplication)
		=> / (division)
		=> % (modulo, remainder after division)

		Example:
			int a=55;
			int b=12;

			int sum = a+b; //67
			int sub = a-b; //43
			int mult = a*b; //660
			int div= a/b; //4
			int mod=a%b; //7

	2. Relational Operators: Relational operators are used to compare values. Which returns boolean value as result.
		-> == (equal to)
		-> != (not equal to)
		-> > (greater than)
		-> < (less than)
		-> >= (greater than or equal to)
		-> <= (less than or equal to)

		Example:

			int a = 5;
			int b = 8;

			System.out.println(":(a==b):"+(a==b)); //false
			System.out.println(":(a!=b):"+(a!=b)); //true
			System.out.println(":(a>b):"+(a>b)); //false
			System.out.println(":(a<b):"+(a<b)); //true
			System.out.println(":(a>=b):"+(a>=b)); //false
			System.out.println(":(a<=b):"+(a<=b)); //true

	3. Logical Operators: Logical Operators work on the Boolean operand. It operates on two Boolean values, which return Boolean values as a result.

		-> && (logical AND)	: 	If both operands are true then only the "logical AND" operator evaluates true.
		-> ||
		: 	The logical OR operator is only evaluated as true when one of its operands evaluates true.
								If either or both expressions evaluate true, then the result is true.
		-> ! (logical NOT) 	: 	The logical NOT is a Unary Operator, it operates on single operands.
								It reverses the value of operands, if the value is true, then it gives false, and if it is false, then it gives true.

			boolean condition1 = true;
			boolean condition2 = false;
			boolean resultAnd = (condition1 && condition2);  // false
			boolean resultOr = (condition1 || condition2);   // true
			boolean resultNot = !condition1;

			int a = 5;
			int b = 6;
			System.out.println("logical and stmt..."+( (a < b) && (a <= b)));

	4. Assignment Operator: This operator is used to store some value into a variable.

		Operator 		Example 		Equivalent To
		= 				a=b; 			a=b;
		+= 				a+=b; 			a=a+b;
		-= 				a-=b; 			a=a-b;
		*= 				a*=b; 			a=a*b;
		/= 				a/=b; 			a=a/b;
		%= 				a%=b; 			a=a%b;

	5. Increment and Decrement Operators (Unary Operators):
		-> The Unary operators require only one operand. Unary operators are used to perform various operations i.e.:
		-> ++ (Increment): It is used to increment the value by 1.
				It can be used in two ways.

				Pre-increment:
					Syntax:  ++variableName;
					Example: int k=10;
					++k;
					System.out.println(":k:"+k);//11


				Post-increment:
					Syntax:  variableName++;
					Example: int k=10;
					System.out.println(":k:"+(k++));//10
					
		-> -- (Decrement): It is used to decrement the value by 1.
				It can be used in two ways.

				Pre-decrement:
					Syntax:  --variableName;
					Example: int k=10;
					--k;


				Post-decrement:
					Syntax:  variableName--;
					Example: int k=10;
					k--;

	6. Ternary Operator : The ternary operator, also known as the conditional operator, is a concise way to express an if-else statement in a single line. The ternary operator has the following.

		Syntax: variable = (condition) ? expression executes if condition true : expression executes if condition false;

		Example:  
		 int a=50;
		 int b=100;
		 
		 int minVal;
		 minVal = (a>b)?b:a;


****************************************
08Feb2024
****************************************
		 
	7. Bitwise Operators: Bitwise operators are used to perform operations on individual bits of binary numbers. These operators work at the binary level, manipulating the bits of integers.
				
		=>	& -> AND :	-> Performs a bitwise AND operation.
						-> Returns true if both arguments are true.
						
						boolean flag1=true;
						boolean flag2=false;
						boolean result = (flag1 & flag2); // false
						
						
						int a = 5  # binary: 0101
						int b = 7  # binary: 0111
						
			   int result = a & b  # binary: 0101   =>  5
						
		=>	| -> OR:	-> Performs a bitwise OR operation.
						-> Returns true if atleast one argument is true.
						
						boolean flag1=true;
						boolean flag2=false;
						boolean result = (flag1 | flag2); // true
						
						a = 5  # binary: 0101
						b = 7  # binary: 0111
						
			   result = a | b  # binary: 0111   => 7						

						
		=> 	^ -> X-OR:	-> Performs a bitwise XOR (exclusive OR) operation.
						-> Returns true if both arguments are different.
						
						boolean flag1=true;
						boolean flag2=false;
						boolean result = (flag1 ^ flag2); // true
						
						a = 5  # binary: 0101
						b = 7  # binary: 0111
						
			   result = a ^ b  # binary: 0010   => 2	
			
		=>	NOT (~):	->	bitwise complement operator.
							Inverts the bits, changing 0s to 1s and vice versa.
							boolean flag=true;
							boolean result=(~flag); // Compile time error.
						-> This operator applicable for only for integral types, can't apply for boolean type.
							
						int a=5;
						System.out.println(~a); //-6
						
	8. Shift Operators:
		=>	<<	(Left Shift Operator:	
					-> The left shift operator (<<) shifts the bits of a number to the left by a specified number of positions.
					-> The vacant positions on the right are filled with zeros.
					
					int a = 5  //# binary: 0101
					int result = a<<3; //# binary: 0101000 =>40
					
		=> 	>> 	(Right Shift Operator):
					-> The right shift operator (>>) shifts the bits of a number to the right by a specified number of positions.
					-> The vacant positions on the left are filled with the sign bit (the leftmost bit).
					int a = 5  //# binary: 0101
					int result = a>>1; //# binary: 0010 =>2
					
******************************************
Conditional Statements:
******************************************
	=> 	Decision Making in programming is similar to decision-making in real life. In programming also face some situations where we want a certain block of code to be executed when some condition is fulfilled.  

	=>	Conditional statements are used to control the flow of a program based on certain conditions. 
		
	=>	The main conditional statements in Java are:
		1. if
		2. if-else
		3. if-else if
		4. nested if
		5. switch
		
		1. if Statement:
			The if statement is used to execute a block of code only if the given condition is true.
			syntax:
				if(condition) 
				{
				   // Statements to execute if
				   // condition is true
				}
				
			if(condition)  //Assume condition is true
				statement1;  //part of if block
			statement2;    // separate from if block
			
			Example:
				int x = 10;
				if (x > 5) {
					System.out.println("x is greater than 5");
				}
			
		2. if-else Statement: The if-else statement allows you to execute one block of code if the condition is true and another block if it is false.
			Syntax:
				if (condition) {
					// code to be executed if the condition is true
				} else {
					// code to be executed if the condition is false
				}
				
			Example:
				int y = 3;
				if (y % 2 == 0) {
					System.out.println("y is even");
				} else {
					System.out.println("y is odd");
				}	

		3. if- else if Statement:	This statement allows you to check multiple conditions in sequence.
		
			Syntax:
			if (condition1) {
				// code to be executed if condition1 is true
			} else if (condition2) {
				// code to be executed if condition2 is true
			} else {
				// code to be executed if all conditions are false
			}
			
			Example:
			int z = 0;
			if (z > 0) {
				System.out.println("z is positive");
			} else if (z < 0) {
				System.out.println("z is negative");
			} else {
				System.out.println("z is zero");
			}
		4. nested if statement: A nested if is an if statement that is the target of another if or else. Nested if statements mean an if statement inside an if statement. 
		
			Syntax:
		
			if (condition1) 
			{
			   // Executes when condition1 is true
			   if (condition2) 
			   {
				  // Executes when condition2 is true
			   }
			}
			
			Example:
			int x = 10;
			int y = 5;

			if (x > 5) {
				System.out.println("x is greater than 5");
				if (y > 2) {
					System.out.println("y is greater than 2");
				} else {
					System.out.println("y is not greater than 2");
				}
				System.out.println("==========>");
			} else {
				System.out.println("x is not greater than 5");
			}



************************************
09Feb2024
************************************			
		
		5. switch Statement: 
			-> The switch statement is a multiway branch statement. It provides an easy way to dispatch execution to different parts of code based on the value of the expression. 
			-> Basically, the expression can be a byte, short, char, or int primitive data types. It basically tests the equality of variables against multiple values.	
			-> From JDK7, it also works with String, Wrapper classes and enum types.
			
			-> There can be any number of cases, but duplicate case's values are not allowed.
			-> The value for a case must be of the same data type as the variable in the switch.
			-> The value for a case must be constant or literal. Variables are not allowed.
			-> The break statement is used inside the switch to terminate a statement sequence.
			-> The break statement is optional. If omitted, execution will continue on into the next case.
			-> The default statement is optional and can appear anywhere inside the switch block. In case, if it is not at the end, then a break statement must be kept after the default statement to omit the execution of the next case statement.
		
			-> Default Case:
				If none of the case labels match the value of the expression, the optional default case (if present) is executed.
		
			Syntax:
			switch (expression) {
			
				case value1:
					// code to be executed if expression equals value1
					break;
				case value2:
					// code to be executed if expression equals value2
					//
				case value2:
					// code to be executed if expression equals value2
					//
					
					break;
				// additional cases as needed
				default:
					// code to be executed if none of the cases match
			}
					
			Example:
				char grade = 'B';
				switch (grade) {
					case 'A':
						System.out.println("Excellent");
						break;
					case 'B':
						System.out.println("Good");
						break;
					case 'C':
						System.out.println("Satisfactory");
						break;
					default:
						System.out.println("Needs Improvement");
				}

				
1. Question: swap these 2 variables without using temporary operator.
	int a=7;
	int b=3;
	
	a=3,b=7;
	
	a = a+b; //a=10,b=3
	b = a-b; //b=7,a=10
	a = a-b; //a=3,b=7

2. O/P of below code?
		int x=5;
		x=x++;
		sop(x); //5
		
3. O/P of below code?
		int x = 5;
		int y = ++x+x--; x=6
						 
		sop(":x:"+x); // 5
		sop(":y:"+y); //12

4. O/P of below code?
		int a = 10;
		int b = 5;
		int c = a++ - --b * 2;
		
		sop(":a:"+a); // 11
		sop(":b:"+b); //4
		sop(":c:"+c); //2

		
5. O/P of below code?
		int p = 5, q = 7, r = 10;
		p = ++q + r-- - p++;
		

6. int number = 15;
	int result = (number % 2 == 0) ?  ++number : number++;
	sop(":result:"+result); //15
	sop(":number:"+number); //16
	
7. Print the nearest odd number if the given number is even, print the same.
	

8.	O/P of below code?
		int result2= 1 + 5 * 3 ;
		sop(":result2:"+result2);
		
9.	O/P of below code?
		int result3 = 5 + 6 * 4 / 3 ;
		sop(":result3:"+result3); //13
		
10. Is the given year a leap year?
	

Interactive Programming:	

	=> We have written programs that print console output, but it is also possible to read input from the console
	=> The user types input into the console.  We capture the input and use it in our program. Such a program is called an interactive program.
	=> Interactive programs can be challenging. Computers and users think in very different ways.Users misbehave.

	=> System.out
		An object with methods named println and print

	=> System.in
		not intended to be used directly
		We use a second object, from a class Scanner, to capture the input.
	
	Scanner class:
		=>	The Scanner class is used to get user input, and it is found in the java.util package.
		=>	To use the Scanner class, create an object of the class.
		
		Example:
		
		
		Scanner sc=new Scanner(System.in);
				
		System.out.println(":Start:");
		Scanner sc=new Scanner(System.in);
		System.out.println(":Enter a Number1:");
		int num1=sc.nextInt();
		System.out.println(":Enter a Number2:");
		int num2=sc.nextInt();
		System.out.println(":sum is:"+(num1+num2));
		System.out.println(":End:");
		
		Java class libraries: Classes included with Java's JDK is organized into groups named packages
		To use a package, put an import declaration in your program.
		Syntax:
			// put this at the very top of your program
			import packageName.*;
			
		Scanner is in a package named java.util

			import java.util.*;

		To use Scanner, you must place the above line at the top of your program (before the public class header).
		
		Method				Description
		======================================================
		nextBoolean()		Reads a boolean value from the user
		nextByte()			Reads a byte value from the user
		nextDouble()		Reads a double value from the user
		nextFloat()			Reads a float value from the user
		nextInt()			Reads a int value from the user
		nextLine()			Reads a String value from the user
		nextLong()			Reads a long value from the user
		nextShort()			Reads a short value from the user
		
Assignment:
	Find the age of a person.

************************************
12Feb2024
************************************			
Unicode System: 
	-> Unicode is an universal international standard character encoding that is capable of representing most of the world's written languages.

	Why does Java use the Unicode System?
		-> Before Unicode, there were many language standards:
			-> ASCII (American Standard Code for Information Interchange) for the United States.
			-> ISO 8859-1 for Western European Language.
			-> KOI-8 for Russian.
			-> GB18030 and BIG-5 for chinese, and so on.
			-> These systems caused problems.
				-> A particular code value corresponds to different letters in the various language standards.
				-> The encodings for languages with large character sets have variable length. Some common characters are encoded as single bytes, others require two or more bytes.

	->	To solve these problems, a new language standard was developed i.e. Unicode System.
	->	lowest value:0000
	->	highest value: FFFF
	->  The Unicode standard uses hexadecimal to express a character.
	->  The most common encoding for Unicode is UTF-8, UTF-16, and UTF-32.
			*Unicode Transformation Format (UTF)
	
	Character	Decimal Value	Hexadecimal Value
	 A			65				0041
	 Z			90				005A
	  à°…			3077			0C05
	  à°”			3092			0C14
	 a			97				0061	
	 z			122				007A
	 
	 	char ch='à°…';
		char ch1=3077;
		char ch2='\u0C05';
		System.out.println(":ch:"+ch);
		System.out.println(":ch1:"+ch1);
		System.out.println(":ch2:"+ch2);
		
		char ch='A';
		char ch1=65;
		char ch2='\u0041';
		System.out.println(":ch:"+ch);
		System.out.println(":ch1:"+ch1);
		System.out.println(":ch2:"+ch2);
		
		System.getProperty("file.encoding");
		System.out.println(":file.encoding:"+System.getProperty("file.encoding"));

	=>	Escape Sequence:
		->	An escape sequence in java is a combination of specific characters or a sequence of characters with a backslash. 
		->  Use it to represent the special characters.
		
		Example:
			\t: It is used to insert a tab in the text.
			\': It is used to insert a single quote of character in the text.
			\": It is used to insert a double-quote character in the text.
			\n: It is used to insert a new line in the text.
		
********************************************
Methods in Java:
********************************************

	=>	In general, a method is a way to perform some task. In java the method is a collection of instructions or statements that performs a specific task.
	=>	A method is a block of code which only runs when it is called.
	=>	You can pass data, known as parameters, into a method. Methods are used to perform certain actions, and they are also known as functions.
	=>	In Java, every method must be a part of some class, i.e. used to expose the behavior of an object.
	=>	It provides Code reusability and Code Optimization. We create a method once and then use it repeatedly.
	=>	A method returns the result to the caller or should mention the void as return type if it is not returning anything.
	
	Syntax Of a method:
		accessmodifer returntype methoName(list of parameters){
			//Statements
			return data;
		}

	Example:
		public int sum(int a,int b){
			int sum=a+b;
			return sum;
		}
		
	=>	Method Declaration:
	
		-> In general, method declarations have 6 components:
			
		1. Access Modifier:
			=>	It defines the access type of the method i.e. from where it can be accessed in an application. 
			=>	In Java, there are 4 types of access specifiers.

				public: It is accessible in all classes in an application.
				
				protected: It is accessible within the class in which it is defined and in its subclasses
				
				private: It is accessible only within the class in which it is defined.
				
				default: It is declared/defined without using any modifier. It is accessible within the same class and package within which its class is defined.
			=> It is optional and considered default if we don't declare it.	
				
		2. Return type: 
			=> 	The data type of the value returned by the method or void if does not return a value. 
			=>	It is Mandatory.
			
			public void sum(int a,int b){
				int sum=a+b;
				sop(sum);
			}
			
		3. Method Name: 
			=> 	The rules for field names apply to method names as well, but the convention is a little different. 
			=>	It is Mandatory.
			
		4. Parameter list: 
			=>	Comma-separated list of the input parameters is defined, preceded by their data type, within the enclosed parenthesis. If there are no parameters, you must use empty parentheses ().  
			=>	It is Optional.
		
		5. Exception list: 
			=>	The exceptions you expect by the method can throw, you can specify these exception(s). 
			=>	It is Optional.
					void sum()throws Exception{
						//statements
					}
			
		6. Method body: 
			=>	It is enclosed between braces. The code you need to be executed to perform your intended operations.  
			
	=>	Types of Methods in Java:
	
		1. Predefined Method
			=>	In Java, predefined methods are the method that is already defined in the Java class libraries.
			=>	It is also known as the standard library method or built-in method. We can directly use these methods just by calling them in the program at any point. 
			=>	Some predefined methods areÂ length(), equals(), compareTo(), sqrt(),Â print() etc. 
			=>	When we call any of the predefined methods in our program, a series of codes related to the corresponding method runs in the background that is already stored in the library.


		2. User-defined Method
			=>	The method written by the programmer is known as a user-defined method. These methods are modified according to the requirement.
			
	=>	Two ways can create a method in Java.
			1. Instance Method: Declared inside a class.
				Syntax:
						returnType methodName(){
							//body
						}
						
						int sum(int a,int b,int c){
							int result=a+b+c;
							return result;
						}
						
				=>	To call an instance method should have an object.
				Syntax:
						ClassName obj=new ClassName();
						obj.methodName();
						
				Example:
						public class Addition{
							public int add(int a,int b){
								int sum=a+b;
								return sum;
							}
						}
				
						public class AdditionTest{
						
							public static void main(String[] args){
								int a=10;
								int b=14;
								Addition obj=new Addition();
								int result = obj.add(a,b);
								System.out.println(":result:"+result);
							}
						
						}
						
			2. Static Method: Declared inside class with static keyword.

						static returnType methodName(){
							//body
						}
						
						static int mult(int a,int b){
							int c=a*b;
							return c;
						}

					=>	Can call static methods with the class name.
					Syntax:
							ClassName.methodName();
							public class Addition2{
								static int sum;
								public static void add(int a,int b){
									sum=a+b;
									return sum;
								}	
							}
							
							public class AdditionTest2{
								public static void main(String[] args){
									int a=15;
									int b=20;
									int c=Addition.sum();
									System.out.println(":c:"+c);
								}
							}

	=>	Method Signature:
			=>	It consists of the method name and a parameter list (i.e, number of parameters, type of the parameters, and order of the parameters). 
			=>	The return type and exceptions are not considered as part of it. 
			
			Example :
				sum(int a, int b) Number of parameters is 2, Type of parameter is int,int.
				
	=>	How to Name a Method?
			->	While defining a method, remember that the method name must be a verb and start with a lowercase letter.
	
			->	If a method name is a single word that should be a verb in lowercase.
					Example : add(int a,int b)
							  
			->	If the method name has more than two words, the first name must be a verb followed by an adjective or noun. In the multi-word method name, the first letter of each word must be in uppercase except the first word.
					Example:
								setName(String name)
								getName()
								downloadFile()
								
			->	Generally, a method has a unique name within the class in which it is defined but sometimes a method might have the same name as other method names within the same class which is called method overloading.
			->	method overloading  is allowed in java.




